[ ] create the actual VM
    - [X] create parser for text -> opcodes
    - [ ] create the system for strings (probably just array selection)
    - [ ] create all the different op codes
    - [X] create the vm handler object, contains stack, pointer, etc.
    - [X] create actual VM execution function (shape does it nicely, can referr to that)

[ ] create the compiler
    WIP, for now we can focus on the basics
    - [x] handle VariableDeclaration
    - [x] handle CallExpression (not wrapped FunctionExpression for now)
    - [-] handle CallExpression inputs and outputs
        - [X] make call expression inputs make use of an array so if can have infinite inputs or 0 inputs, currently it only supports 1 input and it has to be a string (i think).
    - [ ] support numeric literals as callexpress inputs when not proxied thru a variable VariableDeclaration
    - [ ] handle arrays
    - [ ] for loops
    - [ ] objects
    - [ ] custom functions (would be a set of instructions and pointer map pushed into the stack and used in .run()?)
    - [ ] if else statements
    - [ ] all different types of math

    Code optimizations:
    - [X] Make the compiler a class
    - [ ] Make a function for adding bytes
    - [ ] Make a function for adding pointers